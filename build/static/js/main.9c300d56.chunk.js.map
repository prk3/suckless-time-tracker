{"version":3,"sources":["reportWebVitals.ts","state.tsx","utils.ts","task.tsx","tasks.tsx","week-summary.tsx","week-timeline.tsx","week.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initial","tasks","events","activeTask","settings","manDayDuration","Duration","fromObject","hours","eventRetentionMonths","version","StateContext","React","createContext","state","update","groupTasksByTaskId","Object","fromEntries","map","task","id","cs","output","classes","forEach","c","assert","condition","console","error","trace","Error","Task","fn","active","timeSpent","onActiveChange","onEstimationChange","onNameChange","onDelete","innerRef","timeSpentElement","estimation","estimationClassName","estimationSpent","as","estimationRatio","className","value","Math","min","title","toFixed","max","onClick","ev","target","currentTarget","ref","name","onChange","type","step","Number","window","confirm","Tasks","useContext","useState","filter","setFilter","taskMap","useMemo","story","event","taskId","push","groupEventsByTaskId","updateTaskEstimation","undefined","deleted","updateTaskActive","newEvents","length","end_time","DateTime","local","start_time","deleteTask","filteredTasks","trim","includes","index","totalTime","seconds","plus","diff","calculateTotalTimeFromEvents","draggableId","String","provided","style","padding","draggableProps","dragHandleProps","floor","random","setTimeout","document","querySelector","focus","placeholder","alert","onDragEnd","result","source","destination","reason","sourceIndex","findIndex","e","destinationIndex","splice","reorderedItem","droppableId","droppableProps","formatDuration","duration","minutes","WeekSummary","startOfWeek","weekLog","week","day","weekday","taskDuration","weekLogFromEvents","endOfWeek","endOf","selectWeekEvents","days","toFormat","entries","keys","values","reduce","acc","next","toString","WeekTimeline","weekFromEvents","range","hour","time","top","startOf","height","start","end","log","end_","equals","heightFromStartAndEnd","lines","linesCountFromHeight","WebkitLineClamp","Week","setStartOfWeek","mode","setMode","minus","weeks","restoreState","localStorage","getItem","stateString","obj","JSON","parse","fromISO","deserialize","saveState","setItem","stringify","App","setState","useReducer","forceUpdate","forceUpdateIntervalRef","useRef","useEffect","current","setInterval","clearInterval","latestStateRef","dirty","debouncedSaveRef","debounce","trailing","leading","onbeforeunload","Provider","updateFunction","newState","global","dbg","a","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9c300d56.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { DateTime, Duration } from 'luxon';\nimport React from 'react';\n\nexport type TaskId = number;\nexport type ManDays = number;\n\n// A thing you can work on.\nexport type Task = {\n    id: TaskId,\n    name: string,\n    // If estimated, we'll be able to show time spent on the task.\n    estimation: ManDays | null,\n    // Flag hiding a task from the interface. Soft-deleted tasks will be\n    // permanently deleted when no \"start\" event has been recorded in 3 months.\n    // This makes sure that deleting a task will not destroy \"recent\" history.\n    deleted: boolean,\n}\n\n// Started or started and finished piece of work.\nexport type Event = {\n    taskId: TaskId,\n    start_time: DateTime,\n    end_time: DateTime | null,\n}\n\nexport type Settings = {\n    // How much real time one ManDay represents. Used for displaying progress\n    // on tasks.\n    manDayDuration: Duration,\n    // The app is allowed to delete events older than that many months. Progress\n    // on estimated tasks may go down.\n    eventRetentionMonths: number,\n}\n\nexport type State = {\n    tasks: Task[],\n    events: Event[],\n    activeTask: TaskId | null,\n    settings: Settings,\n    version: number,\n}\n\nexport const initial: State = {\n    tasks: [],\n    events: [],\n    activeTask: null,\n    settings: {\n        manDayDuration: Duration.fromObject({ hours: 7 }),\n        eventRetentionMonths: 3,\n    },\n    version: 1,\n};\n\nexport type StateUpdateFunction = (state: State) => State;\n\nexport type StateUpdate = (fn: StateUpdateFunction) => void;\n\nexport const StateContext = React.createContext({ state: initial, update: () => {} } as { state: State, update: StateUpdate });\n\nexport function deserialize(stateString: string): State {\n    let obj = JSON.parse(stateString);\n    let hydrated = {\n        ...obj,\n        events: obj.events.map((e: any) => ({\n            ...e,\n            start_time: DateTime.fromISO(e.start_time),\n            end_time: e.end_time && DateTime.fromISO(e.end_time)\n        })),\n        settings: {\n            ...obj.settings,\n            manDayDuration: Duration.fromISO(obj.settings.manDayDuration),\n        },\n    };\n\n    return hydrated as State;\n}\n","import { DateTime, Duration } from \"luxon\";\nimport { MouseEvent } from \"react\";\nimport { Event, Task } from \"./state\";\n\nexport function groupTasksByTaskId(tasks: Task[]): { [taskId: number]: Task } {\n    return Object.fromEntries(tasks.map(task => [task.id, task]));\n}\n\nexport function groupEventsByTaskId(events: Event[]): { [taskId: number]: Event[] } {\n    let story: { [taskId: number]: Event[] } = {};\n\n    for (let event of events) {\n        if (story[event.taskId]) {\n            story[event.taskId].push(event);\n        } else {\n            story[event.taskId] = [event];\n        }\n    }\n\n    return story;\n}\n\nexport function calculateTotalTimeFromEvents(events: Event[]): Duration {\n    let totalTime = Duration.fromObject({ seconds: 0 });\n\n    events.forEach(event => {\n        totalTime = totalTime.plus((event.end_time || DateTime.local()).diff(event.start_time));\n    });\n\n    return totalTime;\n}\n\nexport function cs(...classes: (string | false)[]): string {\n    let output = \"\";\n    classes.forEach(c => {\n        if (c !== false) {\n            output = output + \" \" + c;\n        }\n    });\n    return output;\n}\n\nexport function assert(condition: boolean): void {\n    if (!condition) {\n        console.error(\"assertion failed!\");\n        console.trace();\n        throw new Error(\"assertion failed\");\n    }\n}\n\nexport const onlyThisElementClick = (fn: (ev: MouseEvent) => void) => (ev: MouseEvent) => {\n    if (ev.target === ev.currentTarget) {\n        fn(ev);\n    }\n}\n","import { Duration } from 'luxon';\nimport { ManDays, Task as TaskModel } from './state';\nimport { cs, onlyThisElementClick } from './utils';\nimport './task.css';\n\nconst HOURS_IN_ONE_MAN_DAY = 7;\n\ntype TaskProps = {\n    task: TaskModel,\n    active: boolean,\n    timeSpent: Duration,\n    onActiveChange: (active: boolean) => void,\n    onEstimationChange: (estimation: ManDays | null) => void,\n    onNameChange: (name: string) => void,\n    onDelete: () => void,\n    innerRef?: React.Ref<HTMLDivElement>,\n};\n\nexport function Task({ task, active, timeSpent, onActiveChange, onEstimationChange, onNameChange, onDelete, innerRef }: TaskProps) {\n\n    const updateName = (ev: any) => {\n        onNameChange(ev.target.value);\n    };\n\n    const toggleActive = () => {\n        onActiveChange(!active);\n    }\n\n    const updateEstimation = (ev: any) => {\n        onEstimationChange(Number(ev.target.value) || null);\n    };\n\n    const incrementEstimation = () => {\n        onEstimationChange((task.estimation || 0) + 1);\n    };\n\n    const decrementEstimation = () => {\n        onEstimationChange(((task.estimation || 1) - 1) || null);\n    };\n\n    let timeSpentElement = null;\n\n    if (task.estimation !== null) {\n        let estimationSpent = timeSpent.as('hours') / HOURS_IN_ONE_MAN_DAY;\n        let estimationRatio = estimationSpent / task.estimation;\n        let estimationClassName;\n\n             if (estimationRatio < 0.5) estimationClassName = 'ok';\n        else if (estimationRatio < 0.7) estimationClassName = 'worse';\n        else if (estimationRatio < 0.9) estimationClassName = 'bad';\n        else                            estimationClassName = 'critical';\n\n        timeSpentElement = (\n            <span>\n                Time:\n                {\" \"}\n                <progress\n                    className={cs(estimationClassName)}\n                    value={Math.min(estimationRatio, 1.0)}\n                    title={`${estimationSpent.toFixed(1)} of ${task.estimation} man days`}\n                    max=\"1\"\n                />\n            </span>\n        );\n    }\n\n    return (\n        <div\n            className={cs(\"task\", active && \"active\")}\n            key={task.id}\n            onClick={onlyThisElementClick(toggleActive)}\n            ref={innerRef}\n        >\n            <div><textarea className=\"name\" value={task.name} onChange={updateName}/></div>\n            <div>{\"Estimation: \"}\n                <button type=\"button\" className=\"button minus\" onClick={decrementEstimation}>-</button>\n                {\" \"}\n                <input\n                    className=\"estimation\"\n                    min=\"1\"\n                    step=\"1\"\n                    type=\"number\"\n                    value={task.estimation || \"\"}\n                    onChange={updateEstimation}\n                />\n                {\" \"}\n                <button type=\"button\" className=\"button plus\" onClick={incrementEstimation}>+</button>\n                {\" \"}\n                {timeSpentElement}\n                {\" \"}\n                <button type=\"button\" className=\"button\" onClick={() => window.confirm(\"You sure?\") && onDelete()}>Delete</button>\n            </div>\n        </div>\n    );\n}\n","import { DateTime } from 'luxon';\nimport React from 'react';\nimport { ManDays, StateContext, TaskId } from './state';\nimport { Task } from './task';\nimport { assert, groupEventsByTaskId, groupTasksByTaskId, calculateTotalTimeFromEvents } from './utils';\nimport './tasks.css';\n\nimport { DragDropContext, Draggable, Droppable, DropResult, ResponderProvided } from 'react-beautiful-dnd';\n\nconst ALERT_MSG = `\nGood day!\n\nThis is a small app for time tracking. It's serverless, meaning all data is stored on your device, in local storage. As you can see, it's pretty basic and not well tested. Probably works only on Firefox. Use it at your own risk.\n\nFell free to make backups of the page. If you only want to only save the time data, you can get it with window.localStorage.getItem('state').`;\n\nexport function Tasks() {\n    const { state, update } = React.useContext(StateContext);\n    const [filter, setFilter] = React.useState('');\n\n    let taskMap = React.useMemo(() => groupTasksByTaskId(state.tasks), [state.tasks]);\n    let story = React.useMemo(() => groupEventsByTaskId(state.events), [state.events]);\n\n    const addNewTask = () => {\n        update(state => {\n            let id = Math.floor(Math.random() * 1_000_000_000);\n\n            return {\n                ...state,\n                tasks: [\n                    {\n                        id,\n                        name: \"\",\n                        estimation: null,\n                        deleted: false,\n                    },\n                    ...state.tasks,\n                ],\n            };\n        });\n        // Focus on the new task.\n        window.setTimeout(() => {\n            // @ts-ignore\n            document.querySelector(\".task .name\")?.focus();\n        },1);\n    };\n\n    const updateFilter = (ev: any) => {\n        setFilter(ev.target.value);\n    };\n\n    const updateTaskName = (id: TaskId) => (name: string) => {\n        // Task must exist and not be deleted.\n        assert(taskMap[id] !== undefined);\n        assert(taskMap[id].deleted === false);\n\n        update(state => ({\n            ...state,\n            tasks: state.tasks.map(task => task.id !== id\n                ? task\n                : { ...task, name }\n            ),\n        }));\n    };\n\n    const updateTaskEstimation = (id: TaskId) => (estimation: ManDays | null) => {\n        // Task must exist and not be deleted.\n        assert(taskMap[id] !== undefined);\n        assert(taskMap[id].deleted === false);\n\n        update(state => ({\n            ...state,\n            tasks: state.tasks.map(task => task.id !== id\n                ? task\n                : { ...task, estimation }\n            ),\n        }));\n    };\n\n    const updateTaskActive = (id: TaskId) => (active: boolean) => {\n        // Task must exist and not be deleted.\n        assert(taskMap[id] !== undefined);\n        assert(taskMap[id].deleted === false);\n\n        update(state => {\n            if (active) {\n                // Task must be inactive if we want to activate it.\n                assert(state.activeTask !== id);\n\n                let newEvents = [...state.events];\n\n                if (state.activeTask !== null) {\n                    assert(newEvents.length > 0);\n                    assert(newEvents[newEvents.length - 1].end_time === null);\n                    newEvents[newEvents.length - 1] = {\n                        ...newEvents[newEvents.length - 1],\n                        end_time: DateTime.local(),\n                    };\n                }\n                newEvents.push({\n                    taskId: id,\n                    start_time: DateTime.local(),\n                    end_time: null,\n                });\n\n                return {\n                    ...state,\n                    activeTask: id,\n                    events: newEvents,\n                };\n            } else {\n                // Task must be active if we want to deactivate it.\n                assert(state.activeTask === id);\n\n                let newEvents = [...state.events];\n\n                assert(newEvents.length > 0);\n                assert(newEvents[newEvents.length - 1].end_time === null);\n\n                newEvents[newEvents.length - 1] = {\n                    ...newEvents[newEvents.length - 1],\n                    end_time: DateTime.local(),\n                };\n\n                return {\n                    ...state,\n                    activeTask: null,\n                    events: newEvents,\n                };\n            }\n        });\n    };\n\n    const deleteTask = (id: TaskId) => () => {\n        // Task must exist and not be deleted.\n        assert(taskMap[id] !== undefined);\n        assert(taskMap[id].deleted === false);\n\n        update(state => {\n            let events;\n            let activeTask;\n            if (state.activeTask === id) {\n                events = [...state.events];\n                assert(events.length > 0);\n                assert(events[events.length - 1].end_time === null);\n                events[events.length - 1] = {\n                    ...events[events.length - 1],\n                    end_time: DateTime.local(),\n                };\n                activeTask = null;\n            } else {\n                events = state.events;\n                activeTask = state.activeTask;\n            }\n\n            return {\n                ...state,\n                tasks: state.tasks.map(task => task.id !== id\n                    ? task\n                    : { ...task, deleted: true }\n                ),\n                activeTask,\n                events,\n            };\n        });\n    };\n\n    const filteredTasks = state.tasks\n        .filter(task => !task.deleted)\n        .filter(task => filter.trim() === \"\" || task.name.includes(filter.trim()))\n\n    const moveTask = (result: DropResult, provided: ResponderProvided) => {\n        const source = result.source;\n        const destination = result.destination;\n\n        if (result.reason === 'DROP' && destination !== undefined) {\n            update(state => {\n                const sourceIndex = state.tasks.findIndex(e => e === filteredTasks[source.index]);\n                const destinationIndex = state.tasks.findIndex(e => e === filteredTasks[destination.index]);\n\n                const tasks = [...state.tasks];\n                const [reorderedItem] = tasks.splice(sourceIndex, 1);\n                tasks.splice(destinationIndex, 0, reorderedItem);\n\n                return { ...state, tasks };\n            });\n        }\n    };\n\n    const tasks = filteredTasks\n        .map((task, index) => {\n            let active = task.id === state.activeTask;\n            let timeSpent = calculateTotalTimeFromEvents(story[task.id] || []);\n\n            return (\n                <Draggable key={task.id} draggableId={String(task.id)} index={index}>\n                    {(provided) => (\n                        <div style={{ padding: '2.5px 5px' }}>\n                            <div {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef} >\n                                <Task\n                                    task={task}\n                                    active={active}\n                                    timeSpent={timeSpent}\n                                    onNameChange={updateTaskName(task.id)}\n                                    onEstimationChange={updateTaskEstimation(task.id)}\n                                    onActiveChange={updateTaskActive(task.id)}\n                                    onDelete={deleteTask(task.id)}\n                                />\n                            </div>\n                        </div>\n                    )}\n                </Draggable>\n            );\n        });\n\n    return (\n        <div>\n            <div className=\"tasks-bar\">\n                <button type=\"button\" className=\"button plus\" onClick={addNewTask}>+</button>\n                {\" \"}\n                <input type=\"text\" value={filter} placeholder=\"Search...\" onChange={updateFilter} />\n                {\" \"}\n                <button type=\"button\" className=\"button plus\" onClick={() => alert(ALERT_MSG)}>?</button>\n            </div>\n            <DragDropContext onDragEnd={moveTask}>\n                <Droppable droppableId=\"tasks\">\n                    {(provided) => (\n                        <div {...provided.droppableProps} ref={provided.innerRef}>\n                            {tasks}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </div>\n    );\n}\n","import React from 'react';\nimport { DateTime, Duration } from 'luxon';\nimport { Event, StateContext } from './state';\nimport { groupTasksByTaskId } from './utils';\n\nfunction formatDuration(duration: Duration): string {\n    let minutes = Math.floor(duration.as('minutes'));\n\n    if (minutes < 60) {\n        return `${minutes}m`;\n    } else if (minutes % 60 === 0) {\n        return `${Math.floor(minutes / 60)}h`;\n    } else {\n        return `${Math.floor(minutes / 60)}h${minutes % 60}m`;\n    }\n}\n\nfunction selectWeekEvents(events: Event[], startOfWeek: DateTime) {\n    let endOfWeek = startOfWeek.endOf('week');\n    return events.filter(event => event.start_time >= startOfWeek && event.start_time <= endOfWeek);\n}\n\nfunction weekLogFromEvents(events: Event[]) {\n    let week: { [taskId: number]: Duration }[] = [{}, {}, {}, {}, {}, {}, {}];\n\n    for (let event of events) {\n        let day = week[event.start_time.weekday-1];\n        let taskDuration = (event.end_time || DateTime.local()).diff(event.start_time);\n        day[event.taskId] = day[event.taskId]?.plus(taskDuration) ?? taskDuration;\n    }\n\n    return week;\n}\n\ntype Props = {\n    startOfWeek: DateTime,\n}\n\nexport default function WeekSummary({ startOfWeek }: Props) {\n    const { state } = React.useContext(StateContext);\n\n    const taskMap = React.useMemo(() => groupTasksByTaskId(state.tasks), [state.tasks]);\n    const weekEvents = React.useMemo(() => selectWeekEvents(state.events, startOfWeek), [state.events, startOfWeek]);\n    const weekLog = weekLogFromEvents(weekEvents);\n\n    return (\n        <div className=\"week-view\">\n            {weekLog.map((day, index) => (\n                <div className=\"week-day\" key={startOfWeek.toString() + ' ' + index}>\n                    <div className=\"week-day-name\" key=\"day\">{startOfWeek.plus({ days: index }).toFormat('cccc')}</div>\n                    {Object.entries(day).map(([taskId, duration]) => (\n                        <div className=\"week-task-log\" key={taskId}>\n                            <div className=\"week-task-log-name\">{taskMap[taskId as any as number].name}</div>\n                            <div className=\"week-task-log-time\">{formatDuration(duration)}</div>\n                        </div>\n                    ))}\n                    {Object.keys(day).length > 0\n                        ? (\n                            <div className=\"week-task-summary\">{formatDuration(Object.values(day).reduce((acc, next) => acc.plus(next)))}</div>\n                        )\n                        : null\n                    }\n                </div>\n            ))}\n        </div>\n    );\n}\n","import React from 'react';\nimport { DateTime, Duration } from 'luxon';\nimport { Event, StateContext } from './state';\nimport { groupTasksByTaskId } from './utils';\nimport { range } from 'lodash';\n\nfunction formatDuration(duration: Duration): string {\n    let minutes = Math.floor(duration.as('minutes'));\n\n    if (minutes < 60) {\n        return `${minutes}m`;\n    } else if (minutes % 60 === 0) {\n        return `${Math.floor(minutes / 60)}h`;\n    } else {\n        return `${Math.floor(minutes / 60)}h${minutes % 60}m`;\n    }\n}\n\nfunction selectWeekEvents(events: Event[], startOfWeek: DateTime) {\n    let endOfWeek = startOfWeek.endOf('week');\n    return events.filter(event => event.start_time >= startOfWeek && event.start_time <= endOfWeek);\n}\n\nfunction weekFromEvents(events: Event[]) {\n    let week: Event[][] = [[], [], [], [], [], [], []];\n\n    for (let event of events) {\n        week[event.start_time.weekday-1].push(event);\n    }\n\n    return week;\n}\n\nfunction topFromTime(time: DateTime) {\n    return time.diff(time.startOf('day')).as('seconds') / (24 * 60 * 60);\n}\n\nfunction heightFromStartAndEnd(start: DateTime, end: DateTime | null) {\n    console.log(start.toString(), end?.toString());\n    const end_ = end || DateTime.local();\n\n    if (!start.endOf('day').equals(end_.endOf('day'))) {\n        return start.endOf('day').diff(start).as('seconds') / (24 * 60 * 60);\n    } else {\n        return end_.diff(start).as('seconds') / (24 * 60 * 60);\n    }\n}\n\nfunction linesCountFromHeight(height: number) {\n    let marginTop = 10;\n    let marginBottom = 10;\n    let lineHeight = 17;\n\n    return Math.max(Math.floor((height - marginTop - marginBottom) / lineHeight), 0);\n}\n\ntype Props = {\n    startOfWeek: DateTime,\n}\n\nexport default function WeekTimeline({ startOfWeek }: Props) {\n    const { state } = React.useContext(StateContext);\n\n    const taskMap = React.useMemo(() => groupTasksByTaskId(state.tasks), [state.tasks]);\n    const weekEvents = React.useMemo(() => selectWeekEvents(state.events, startOfWeek), [state.events, startOfWeek]);\n    const week = weekFromEvents(weekEvents);\n\n    return (\n        <div className=\"week-timeline-container\">\n            <div>\n                {range(0, 25).map(hour => (\n                    <div key={hour} className=\"hour-line\">{hour}</div>\n                ))}\n            </div>\n            <div className=\"week-view week-timeline-view\">\n                {week.map((events, index) => (\n                    <div className=\"week-day\" key={startOfWeek.toString() + ' ' + index}>\n                        <div className=\"week-day-name\" key=\"day\">{startOfWeek.plus({ days: index }).toFormat('cccc')}</div>\n\n                        <div className=\"week-day-events\">\n                            {events.map((event, index) => {\n                                let top = topFromTime(event.start_time) * 960;\n                                let height = heightFromStartAndEnd(event.start_time, event.end_time) * 960;\n                                let lines = linesCountFromHeight(height);\n                                return (\n                                    <div\n                                        className=\"week-event\"\n                                        key={String(event.taskId) + String(index)}\n                                        style={{ top, height }}\n                                        title={taskMap[event.taskId].name + ' - ' + formatDuration((event.end_time || DateTime.local()).diff(event.start_time))}\n                                    >\n                                        <div\n                                            className=\"week-task-log-name\"\n                                            style={{WebkitLineClamp: lines || 'none'}}\n                                        >\n                                            {lines > 0 ? taskMap[event.taskId as any as number].name : ''}\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n","import { DateTime } from 'luxon';\nimport React from 'react';\nimport WeekSummary from './week-summary';\nimport WeekTimeline from './week-timeline';\n\nimport './week.css';\n\nexport function Week() {\n    const [startOfWeek, setStartOfWeek] = React.useState(DateTime.local().startOf('week'));\n    const [mode, setMode] = React.useState<'summary'|'timeline'>('summary');\n\n    const oneWeekBack = () => {\n        setStartOfWeek(startOfWeek.minus({ weeks: 1 }));\n    }\n\n    const oneWeekForward = () => {\n        setStartOfWeek(startOfWeek.plus({ weeks: 1 }));\n    }\n\n    const toggleMode = () => {\n        setMode(mode === 'summary' ? 'timeline' : 'summary');\n    }\n\n    return (\n        <div>\n            <div className=\"week-select\">\n                <button className=\"button minus\" type=\"button\" onClick={oneWeekBack}>&lt;</button>\n                <span className=\"week-range\">{startOfWeek.toFormat(\"d LLLL y\") + ' - ' + startOfWeek.endOf('week').toFormat(\"d LLLL y\")}</span>\n                <button className=\"button plus\" type=\"button\" onClick={oneWeekForward}>&gt;</button>\n                {\" \"}\n                <button className=\"button plus\" type=\"button\" onClick={toggleMode}>↷</button>\n            </div>\n            <div>\n                {mode === 'summary' && <WeekSummary startOfWeek={startOfWeek} />}\n                {mode === 'timeline' && <WeekTimeline startOfWeek={startOfWeek} />}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport { StateContext, initial, StateUpdateFunction, deserialize, State } from './state';\nimport { Tasks } from './tasks';\nimport { Week } from './week';\nimport { debounce } from 'lodash';\n\nfunction restoreState() {\n  let state = window.localStorage.getItem('state');\n  if (state) {\n    return deserialize(state);\n  }\n  saveState(initial);\n  return initial;\n}\n\nfunction saveState(state: State) {\n  window.localStorage.setItem('state', JSON.stringify(state));\n}\n\nexport function App() {\n  const [state, setState] = React.useState(restoreState);\n\n  // force-update interface every minute\n  const [, forceUpdate] = React.useReducer(() => ({}), {});\n  let forceUpdateIntervalRef = React.useRef(0);\n  React.useEffect(() => {\n    forceUpdateIntervalRef.current = window.setInterval(forceUpdate, 60 * 1000);\n    return () => window.clearInterval(forceUpdateIntervalRef.current);\n  });\n\n  // debounce saving state on every change\n  let latestStateRef = React.useRef({ state, dirty: false });\n  let debouncedSaveRef = React.useRef(debounce(\n    () => {\n      saveState(latestStateRef.current.state);\n      latestStateRef.current.dirty = false;\n    },\n    5000,\n    { trailing: true, leading: false },\n  ));\n\n  // save state before closing the page\n  React.useEffect(() => {\n    window.onbeforeunload = () => {\n      // save only if state changed since last last auto-save\n      if (latestStateRef.current.dirty) {\n        saveState(latestStateRef.current.state);\n      }\n    };\n    return () => { window.onbeforeunload = null; };\n  });\n\n  const updateStateWithFunction = (updateFunction: StateUpdateFunction) => {\n    let newState = updateFunction(state);\n    latestStateRef.current.state = newState;\n    latestStateRef.current.dirty = true;\n    debouncedSaveRef.current();\n    setState(newState);\n  };\n\n  return (\n    <StateContext.Provider value={{ state, update: updateStateWithFunction }}>\n      <div className=\"App\">\n        <Tasks/>\n        <Week/>\n      </div>\n      {/* <pre>\n        <code>\n          {JSON.stringify(state, null, 2)}\n        </code>\n      </pre> */}\n    </StateContext.Provider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\ndeclare global {\n  function dbg<T>(a: T): T;\n}\n\n// @ts-ignore\nglobal.dbg = function <T>(a: T) {\n  console.log(a);\n  return a;\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}